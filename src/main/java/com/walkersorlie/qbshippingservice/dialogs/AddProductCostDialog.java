package com.walkersorlie.qbshippingservice.dialogs;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.walkersorlie.qbshippingservice.entities.Product;
import com.walkersorlie.qbshippingservice.entities.ProductCost;
import com.walkersorlie.qbshippingservice.repositories.ProductRepository;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.util.Objects;

public class AddProductCostDialog extends JDialog {
    private ProductRepository productRepository;
    private Product product;
    private JTextField dateTextField;
    private JTextField costTextField;
    private JLabel dateLabel;
    private JLabel costLabel;
    private JButton saveButton;
    private JButton cancelButton;
    private JPanel panel1;
    private DatePicker datePicker;
    private JCheckBox isCurrentPriceCheckbox;

    public AddProductCostDialog(ProductRepository productRepository, Product product) {
        this.productRepository = productRepository;
        this.product = product;

        $$$setupUI$$$();
        createListeners();

        this.setModal(true);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        this.getContentPane().add(panel1);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * IntelliJ requires this method if in 'GUI Designer' in 'Settings', the 'Generate GUI into: Java Source Code'
     * is selected
     */
    private void createUIComponents() {
        DatePickerSettings datePickerSettings = new DatePickerSettings();
        datePickerSettings.setAllowEmptyDates(false);
        datePicker = new DatePicker(datePickerSettings);

        ImageIcon icon = new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/calendar.png")));
        JButton datePickerButton = datePicker.getComponentToggleCalendarButton();
        datePickerButton.setText("");
        datePickerButton.setIcon(icon);
    }

    /**
     * Creates listeners for components
     */
    private void createListeners() {
        // saves the product cost data, updates Product in DB with new product_cost record, then closed the dialog
        saveButton.addActionListener(e -> {
            try {
                String date = datePicker.getDate().toString();
                Double cost = Double.parseDouble(costTextField.getText());

                // if this new price should be set as the current price of the Product
                if (isCurrentPriceCheckbox.isSelected())
                    this.product.setCost(cost);

                System.out.println("size productCosts: " + this.product.getProductCosts().size());
                // create a product cost object from datePicker and costTextField
                ProductCost productCost = new ProductCost(date, cost, product.getId());
                this.product.addProductCost(productCost);
                System.out.println("size productCosts: " + this.product.getProductCosts().size());

                // pass the product and the product cost object just created to DB Update method
//                this.product = productRepository.updateProductProductCost(product, productCost);
                this.product = productRepository.save(this.product);

                // closes the dialog
                AddProductCostDialog.this.setVisible(false);
                AddProductCostDialog.this.dispatchEvent(
                        new WindowEvent(AddProductCostDialog.this, WindowEvent.WINDOW_CLOSING)
                );
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a cost");
                costTextField.requestFocus();
            }
        });

        // closes the dialog without saving any potential data changes
        cancelButton.addActionListener(e -> {
            AddProductCostDialog.this.setVisible(false);
            AddProductCostDialog.this.dispatchEvent(
                    new WindowEvent(AddProductCostDialog.this, WindowEvent.WINDOW_CLOSING)
            );
        });
    }

    public Product getUpdatedProduct() {
        return this.product;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer2, gbc);
        costTextField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(costTextField, gbc);
        costLabel = new JLabel();
        costLabel.setText("Cost");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(costLabel, gbc);
        dateLabel = new JLabel();
        dateLabel.setText("Date Created");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(dateLabel, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer3, gbc);
        saveButton = new JButton();
        saveButton.setText("Save");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(saveButton, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        panel1.add(datePicker, gbc);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(cancelButton, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(spacer5, gbc);
        isCurrentPriceCheckbox = new JCheckBox();
        isCurrentPriceCheckbox.setText("Current Price");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(isCurrentPriceCheckbox, gbc);
        costLabel.setLabelFor(costTextField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
